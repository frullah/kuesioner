require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/prodis", type: :request do
  let(:valid_attributes) {
    FactoryBot.attributes_for(:prodi)
  }

  let(:invalid_attributes) {
    {
      nama: ""
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      sign_in FactoryBot.build_stubbed(:user, :admin)
      Prodi.create! valid_attributes
      get prodis_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      sign_in FactoryBot.build_stubbed(:user, :admin)
      prodi = Prodi.create! valid_attributes
      get prodi_url(prodi)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      sign_in FactoryBot.build_stubbed(:user, :admin)
      get new_prodi_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      sign_in FactoryBot.build_stubbed(:user, :admin)
      prodi = Prodi.create! valid_attributes
      get edit_prodi_url(prodi)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Prodi" do
        sign_in FactoryBot.build_stubbed(:user, :admin)
        expect {
          post prodis_url, params: {prodi: valid_attributes}
        }.to change(Prodi, :count).by(1)
      end

      it "redirects to the created prodi" do
        sign_in FactoryBot.build_stubbed(:user, :admin)
        post prodis_url, params: {prodi: valid_attributes}
        expect(response).to redirect_to(prodi_url(Prodi.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Prodi" do
        sign_in FactoryBot.build_stubbed(:user, :admin)
        expect {
          post prodis_url, params: {prodi: invalid_attributes}
        }.to change(Prodi, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        sign_in FactoryBot.build_stubbed(:user, :admin)
        post prodis_url, params: {prodi: invalid_attributes}
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        FactoryBot.attributes_for(:prodi)
      }

      it "updates the requested prodi" do
        sign_in FactoryBot.build_stubbed(:user, :admin)
        prodi = Prodi.create! valid_attributes
        patch prodi_url(prodi), params: {prodi: new_attributes}
        prodi.reload
        expect(prodi.nama).to eq(new_attributes[:nama])
      end

      it "redirects to the prodi" do
        sign_in FactoryBot.build_stubbed(:user, :admin)
        prodi = Prodi.create! valid_attributes
        patch prodi_url(prodi), params: {prodi: new_attributes}
        prodi.reload
        expect(response).to redirect_to(prodi_url(prodi))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        sign_in FactoryBot.build_stubbed(:user, :admin)
        prodi = Prodi.create! valid_attributes
        patch prodi_url(prodi), params: {prodi: invalid_attributes}
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested prodi" do
      sign_in FactoryBot.build_stubbed(:user, :admin)
      prodi = Prodi.create! valid_attributes
      expect {
        delete prodi_url(prodi)
      }.to change(Prodi, :count).by(-1)
    end

    it "redirects to the prodis list" do
      sign_in FactoryBot.build_stubbed(:user, :admin)
      prodi = Prodi.create! valid_attributes
      delete prodi_url(prodi)
      expect(response).to redirect_to(prodis_url)
    end
  end
end
